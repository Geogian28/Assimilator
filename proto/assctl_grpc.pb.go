// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v6.30.2
// source: assctl.proto

package assctl

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	Assimilator_GetAllConfigs_FullMethodName     = "/assctl.Assimilator/GetAllConfigs"
	Assimilator_GetSpecificConfig_FullMethodName = "/assctl.Assimilator/GetSpecificConfig"
)

// AssimilatorClient is the client API for Assimilator service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AssimilatorClient interface {
	// This defines a "GetAllConfigs" function that clients can call to get all of the configs.
	GetAllConfigs(ctx context.Context, in *GetAllConfigsRequest, opts ...grpc.CallOption) (*GetAllConfigsResponse, error)
	// This defines a "GetSpecificConfig" function that clients can call to get a config specific to the named machine.
	GetSpecificConfig(ctx context.Context, in *GetSpecificConfigRequest, opts ...grpc.CallOption) (*GetSpecificConfigResponse, error)
}

type assimilatorClient struct {
	cc grpc.ClientConnInterface
}

func NewAssimilatorClient(cc grpc.ClientConnInterface) AssimilatorClient {
	return &assimilatorClient{cc}
}

func (c *assimilatorClient) GetAllConfigs(ctx context.Context, in *GetAllConfigsRequest, opts ...grpc.CallOption) (*GetAllConfigsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetAllConfigsResponse)
	err := c.cc.Invoke(ctx, Assimilator_GetAllConfigs_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *assimilatorClient) GetSpecificConfig(ctx context.Context, in *GetSpecificConfigRequest, opts ...grpc.CallOption) (*GetSpecificConfigResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetSpecificConfigResponse)
	err := c.cc.Invoke(ctx, Assimilator_GetSpecificConfig_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AssimilatorServer is the server API for Assimilator service.
// All implementations must embed UnimplementedAssimilatorServer
// for forward compatibility.
type AssimilatorServer interface {
	// This defines a "GetAllConfigs" function that clients can call to get all of the configs.
	GetAllConfigs(context.Context, *GetAllConfigsRequest) (*GetAllConfigsResponse, error)
	// This defines a "GetSpecificConfig" function that clients can call to get a config specific to the named machine.
	GetSpecificConfig(context.Context, *GetSpecificConfigRequest) (*GetSpecificConfigResponse, error)
	mustEmbedUnimplementedAssimilatorServer()
}

// UnimplementedAssimilatorServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedAssimilatorServer struct{}

func (UnimplementedAssimilatorServer) GetAllConfigs(context.Context, *GetAllConfigsRequest) (*GetAllConfigsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllConfigs not implemented")
}
func (UnimplementedAssimilatorServer) GetSpecificConfig(context.Context, *GetSpecificConfigRequest) (*GetSpecificConfigResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSpecificConfig not implemented")
}
func (UnimplementedAssimilatorServer) mustEmbedUnimplementedAssimilatorServer() {}
func (UnimplementedAssimilatorServer) testEmbeddedByValue()                     {}

// UnsafeAssimilatorServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AssimilatorServer will
// result in compilation errors.
type UnsafeAssimilatorServer interface {
	mustEmbedUnimplementedAssimilatorServer()
}

func RegisterAssimilatorServer(s grpc.ServiceRegistrar, srv AssimilatorServer) {
	// If the following call pancis, it indicates UnimplementedAssimilatorServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&Assimilator_ServiceDesc, srv)
}

func _Assimilator_GetAllConfigs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAllConfigsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AssimilatorServer).GetAllConfigs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Assimilator_GetAllConfigs_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AssimilatorServer).GetAllConfigs(ctx, req.(*GetAllConfigsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Assimilator_GetSpecificConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSpecificConfigRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AssimilatorServer).GetSpecificConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Assimilator_GetSpecificConfig_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AssimilatorServer).GetSpecificConfig(ctx, req.(*GetSpecificConfigRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Assimilator_ServiceDesc is the grpc.ServiceDesc for Assimilator service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Assimilator_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "assctl.Assimilator",
	HandlerType: (*AssimilatorServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetAllConfigs",
			Handler:    _Assimilator_GetAllConfigs_Handler,
		},
		{
			MethodName: "GetSpecificConfig",
			Handler:    _Assimilator_GetSpecificConfig_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "assctl.proto",
}
